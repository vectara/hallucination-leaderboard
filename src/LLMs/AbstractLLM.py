class AbstractLLM:
    """
    Abstract Class. To add new LLMs create a new folder and inherit this class

    Attributes:
        name (str): Name of the model
        prompt (str): Prompt before asking to summarize. Static for all children

    Methods:
        summarize_articles(articles): Requests summary for a given
            list of articles
        summarize_one_article(article): Requests summary of input
            article from LLM
        prepare_article_for_llm(article): Injects prompt and slightly reformats
            article text
        summarize(prepared_text): (MUST DEFINE) Requests LLM to summarize the
            given text
    """
    def __init__(self, name: str):
        self.name = name
        # Do we need a pad token at start?
        self.prompt = ("You are a chat bot answering questions using data."
            "You must stick to the answers provided solely by the text in the "
            "passage provided. You are asked the question 'Provide a concise "
            "summary of the following passage, covering the core pieces of "
            "information described.'"
        )

    def summarize_articles(self, articles: list[str]) -> list[str]:
        """
        Takes in a list of articles, iterates through the list. Returns list of
        the summaries

        Args:
            articles (list[str]): List of strings where the strings are human
            written news articles

        Returns:
            list[str]: List of articles generated by the LLM
        """
        summaries = []
        for article in articles:
            summary = self.summarize_one_article(article)
            summaries.append(summary)
        return summaries

    def summarize_one_article(self, article: str) -> str:
        """
        Takes in a string representing a human written article, injects a prompt
        at the start and feeds into the LLM to generate a summary.

        Args:
            article (str): String that is a human written news article
        
        Returns:
            str: A summary of the article generated by the LLM

        """
        prepared_llm_input = self.prepare_article_for_llm(article)
        llm_summary = self.summarize(prepared_llm_input)
        return llm_summary

    def prepare_article_for_llm(self, article: str) -> str:
        """
        Combines prompt and article for input into an LLM

        Args:
            text (str): Content text for LLM

        Returns:
            str: Prompt + content text
        """
        prepared_text = f"{self.prompt} '{article}'"
        return prepared_text

    def summarize(self, prepared_text: str) -> str:
        """
        (MUST DEFINE for new children)
        Requests LLM to generate a summary given the input

        Args:
            prepared_text (str): Prompt prepared text

        Returns:
            str: Generated LLM summary
        """
        pass

